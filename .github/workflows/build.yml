name: Build and Release

on:
  push:
    branches: [main, master]
    tags:
      - "v*"
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Setup Rust
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true

      # Setup Node.js for frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      # Cache Rust dependencies
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Build frontend
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      # Build Rust backend
      - name: Build backend
        run: cargo build --release --target x86_64-unknown-linux-gnu

      # Prepare artifacts directory
      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts/frontend/build
          cp -r frontend/build/* artifacts/frontend/build/
          cp target/x86_64-unknown-linux-gnu/release/pig-pen artifacts/
          chmod +x artifacts/pig-pen

          # Copy essential files
          cp README.md artifacts/ || true
          cp LICENSE artifacts/ || true

          # Create wit directory and copy interface files
          mkdir -p artifacts/wit
          cp -r wit/* artifacts/wit/ || true

          # Create example strategy directory
          mkdir -p artifacts/example-random-strategy
          cp -r example-random-strategy/* artifacts/example-random-strategy/ || true

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pig-pen-linux-x64
          path: artifacts/
          retention-days: 7

  # Create release when pushing tags
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download Linux artifact
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: pig-pen-linux-x64
          path: ./artifacts/linux

      # Create and push tag
      - name: Create and push tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -f latest
          git push -f origin refs/tags/latest

      # Create GitHub release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          files: artifacts/linux/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

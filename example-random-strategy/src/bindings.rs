// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod pig_pen {
        pub mod player {
            /// Interface for a Pig game strategy
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod strategy {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_should_roll_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let result1 = T::should_roll(
                        arg0 as u32,
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                    );
                    match result1 {
                        true => 1,
                        false => 0,
                    }
                }
                pub trait Guest {
                    /// Decides whether to roll the dice given the current game state
                    ///
                    /// Parameters:
                    /// - own-score: The player's current score
                    /// - other-scores: List of all other players' current scores
                    ///
                    /// Returns: true to roll, false to hold
                    fn should_roll(own_score: u32, other_scores: _rt::Vec<u32>) -> bool;
                }
                #[doc(hidden)]
                macro_rules! __export_pig_pen_player_strategy_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "pig-pen:player/strategy@0.1.0#should-roll")] unsafe extern "C"
                        fn export_should_roll(arg0 : i32, arg1 : * mut u8, arg2 : usize,)
                        -> i32 { unsafe { $($path_to_types)*::
                        _export_should_roll_cabi::<$ty > (arg0, arg1, arg2) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_pig_pen_player_strategy_0_1_0_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_player_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::pig_pen::player::strategy::__export_pig_pen_player_strategy_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::pig_pen::player::strategy);
    };
}
#[doc(inline)]
pub(crate) use __export_player_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:pig-pen:player@0.1.0:player:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 248] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07|\x01A\x02\x01A\x02\x01\
B\x03\x01py\x01@\x02\x09own-scorey\x0cother-scores\0\0\x7f\x04\0\x0bshould-roll\x01\
\x01\x04\0\x1dpig-pen:player/strategy@0.1.0\x05\0\x04\0\x1bpig-pen:player/player\
@0.1.0\x04\0\x0b\x0c\x01\0\x06player\x03\0\0\0G\x09producers\x01\x0cprocessed-by\
\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
